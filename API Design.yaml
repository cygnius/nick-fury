openapi: 3.0.3
info:
  title: Therapy Management System API
  description: API for managing therapy sessions and client emotions journals
  termsOfService: http://example.com/terms/
  contact:
    email: api@therapymanagement.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Therapy Management System
  url: http://therapymanagement.com/docs
servers:
  - url: https://api.therapymanagement.com/v1
tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Users
    description: Operations related to users (clients and therapists)
  - name: Therapists
    description: Operations related to therapists
  - name: Clients
    description: Operations related to clients
  - name: Journals
    description: Operations related to emotion journals
  - name: Sessions
    description: Operations related to therapy sessions
  - name: Notes
    description: Operations related to session notes
  - name: Mappings
    description: Operations related to therapist-client mappings
  - name: Messages
    description: Operations related to messaging
  - name: Appointments
    description: Operations related to appointments
  - name: Search
    description: Search across notes, journals, and messages

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                contact:
                  type: string
                email:
                  type: string
                password:
                  type: string
                userType:
                  type: string
                  enum: [CLIENT, THERAPIST]
                qualifications:
                  type: string
                specialization:
                  type: string
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
        409:
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials

  /therapists:
    get:
      tags:
        - Therapists
      summary: Get all therapists
      operationId: getTherapists
      security:
        - BearerAuth: []
      parameters:
        - name: specialization
          in: query
          schema:
            type: string
        - name: qualification
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of therapists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Therapist'

  /therapist/{therapistId}:
    get:
      tags:
        - Therapists
      summary: Get therapist by ID
      operationId: getTherapistById
      security:
        - BearerAuth: []
      parameters:
        - name: therapistId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Therapist profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Therapist'
        404:
          description: Therapist not found

  /therapists/{therapistId}/clients:
    get:
      tags:
        - Therapists
      summary: Get therapist's clients
      operationId: getTherapistClients
      security:
        - BearerAuth: []
      parameters:
        - name: therapistId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        404:
          description: Therapist not found

  /therapists/{therapistId}/clients/search:
    get:
      tags: 
        - Therapists
      summary: Search therapist's clients
      security:
        - BearerAuth: []
      parameters:
        - name: therapistId
          in: path
          required: true
          schema:
            type: integer
        - name: keyword
          in: query
          required: false
          schema:
            type: string
        - name: minFeeling
          in: query
          required: false
          schema:
            type: integer
        - name: maxFeeling
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: List of matched clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        400:
          description: Invalid input
        404:
          description: Therapist not found

  /clients/{clientId}:
    get:
      tags:
        - Clients
      summary: Get client by ID
      operationId: getClientById
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Client profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        404:
          description: Client not found

  /clients/{clientId}/journals:
    post:
      tags:
        - Journals
      summary: Create emotion journal entry
      operationId: createJournalEntry
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journal'
      responses:
        201:
          description: Journal entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        400:
          description: Invalid input
        404:
          description: Client not found

    get:
      tags:
        - Journals
      summary: Get client's journal entries
      operationId: getClientJournals
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: List of journal entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'
        404:
          description: Client not found

  /clients/{clientId}/journals/search:
    get:
      tags:
        - Journals
      summary: Search journal entries by keyword
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
        - name: keyword
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of matching journal entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'
        400:
          description: Invalid input
        404:
          description: Client not found

  /sessions:
    post:
      tags:
        - Sessions
      summary: Request a therapy session
      operationId: requestSession
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: integer
                clientId:
                  type: integer
                appointmentTime:
                  type: string
      responses:
        201:
          description: Session requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          description: Invalid input
        409:
          description: Scheduling conflict

  /sessions/{userId}:
    get:
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        404:
          description: User not found

  /sessions/{sessionId}/notes:
    post:
      tags:
        - Notes
      summary: Add a note to a session
      operationId: addSessionNote
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notes'
      responses:
        201:
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notes'
        400:
          description: Invalid input
        404:
          description: Session not found

    get:
      tags:
        - Sessions
      summary: Retrieve all notes for a specific session
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
        - name: includePrivate
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: List of session notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        404:
          description: Session not found

  /sessions/{sessionId}/notes/search:
    get:
      tags:
        - Notes
      summary: Search session notes by keyword
      operationId: searchSessionNotes
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
        - name: keyword
          in: query
          required: true
          schema:
            type: string
        - name: includePrivate
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: List of matching notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        400:
          description: Invalid input
        404:
          description: Session not found

  /sessions/{sessionId}/status:
    patch:
      tags:
        - Sessions
      summary: Update session status
      operationId: updateSessionStatus
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [ACCEPTED, REJECTED]
      responses:
        200:
          description: Session status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /mappings:
    post:
      tags:
        - Mappings
      summary: Create therapist-client mapping
      operationId: manageMappings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mapping'
      responses:
        201:
          description: Mapping created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
        400:
          description: Invalid input
        409:
          description: Mapping already exists

    patch:
      security:
        - BearerAuth: []
      tags: [Mappings]
      summary: Update mapping status or journal access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mappingId:
                  type: integer
                journalAccess:
                  type: boolean
                status:
                  type: string
      responses:
        200:
          description: Mapping updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'

  /mappings/{clientId}/therapists:
    get:
      tags:
        - Mappings
      summary: Get therapists mapped to a client
      operationId: getClientTherapists
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of mapped therapists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Therapist'
        404:
          description: Client not found

  /mappings/{clientId}/journalAccess:
    patch:
      tags:
        - Mappings
      summary: Client controls journal access
      operationId: updateJournalAccess
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mappingId:
                  type: integer
                journalAccess:
                  type: boolean
      responses:
        200:
          description: Journal access updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
        404:
          description: Mapping not found

  /mappings/{clientId}/status:
    patch:
      tags:
        - Mappings
      summary: Client manages therapist mapping
      operationId: updateMappingStatus
      security:
        - BearerAuth: []
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mappingId:
                  type: integer
                action:
                  type: string
                  enum: [APPROVE, REJECT, REVOKE, REMOVE]
      responses:
        200:
          description: Mapping status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
        400:
          description: Invalid input
        404:
          description: Mapping not found

  /messages:
    post:
      tags:
        - Messages
      summary: Send a message
      operationId: sendMessage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiverId:
                  type: integer
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid input
        404:
          description: Receiver not found

  /messages/{userId}:
    get:
      tags:
        - Messages
      summary: Get messages for a user
      operationId: getUserMessages
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: unreadOnly
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Conversation history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: User not found

  /messages/{messageId}/read:
    patch:
      tags:
        - Messages
      summary: Mark a message as read
      operationId: markMessageAsRead
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Message marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        404:
          description: Message not found

  /appointments:
    post:
      tags:
        - Appointments
      summary: Request or manage appointments
      operationId: manageAppointments
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: integer
                requestedTime:
                  type: string
                  format: date-time
                duration:
                  type: integer
                notes:
                  type: string
      responses:
        201:
          description: Appointment requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: Invalid input
        409:
          description: Time slot not available

  /appointments/{userId}:
    get:
      tags:
        - Appointments
      summary: Get appointments for a user
      operationId: getUserAppointments
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [REQUESTED, CONFIRMED, REJECTED, CANCELLED]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        404:
          description: User not found

  /appointments/{appointmentId}/status:
    patch:
      tags:
        - Appointments
      summary: Update appointment status (e.g., confirm, reject, cancel)
      operationId: updateAppointmentStatus
      security:
        - BearerAuth: []
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [CONFIRMED, REJECTED, CANCELLED]
                notes:
                  type: string
      responses:
        200:
          description: Appointment status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        404:
          description: Appointment not found
 
  /search:
    get:
      tags:
        - Search
      summary: Search across notes, journals and messages
      operationId: globalSearch
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [notes, journals, messages]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  notes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notes'
                  journals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Journal'
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        400:
          description: Invalid search parameters

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        contact:
          type: string
        email:
          type: string
        userType:
          type: string
          enum: [CLIENT, THERAPIST]
    
    Client:
      type: object
      properties:
        clientId:
          type: integer
        userId:
          type: integer
        user:
          $ref: '#/components/schemas/User'

    Therapist:
      type: object
      properties:
        therapistId:
          type: integer
        userId:
          type: integer
        qualifications:
          type: string
        specializations:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Mapping:
      type: object
      properties:
        mappingId:
          type: integer
        therapistId:
          type: integer
        clientId:
          type: integer
        journalAccess:
          type: boolean
        status:
          type: string
          enum: [PENDING, ACTIVE, REJECTED, REVOKED]

    Journal:
      type: object
      properties:
        journalId:
          type: integer
        clientId:
          type: integer
        emotion:
          type: string
        feeling:
          type: integer
        notes:
          type: string
        createdAt:
          type: string

    Session:
      type: object
      properties:
        sessionId:
          type: integer
        therapistId:
          type: integer
        clientId:
          type: integer
        appointmentTime:
          type: string
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED]

    Notes:
      type: object
      properties:
        noteId:
          type: integer
        sessionId:
          type: integer
        content:
          type: string
        isPrivate:
          type: boolean
        createdAt:
          type: string

    Message:
      type: object
      properties:
        messageId:
          type: integer
        senderId:
          type: integer
        receiverId:
          type: integer
        content:
          type: string
        sentAt:
          type: string
        isRead:
          type: boolean

    Appointment:
      type: object
      properties:
        appointmentId:
          type: integer
        therapistId:
          type: integer
        clientId:
          type: integer
        requestedTime:
          type: string
        status:
          type: string
          enum: [REQUESTED, CONFIRMED, REJECTED, CANCELLED]
        notes:
          type: string
        createdAt:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
